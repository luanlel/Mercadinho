/**
 * üîπ Testes Beta
 * S√£o feitos simulando usu√°rios externos, testando erros e situa√ß√µes inesperadas.
 */

describe("üß™ Testes Beta - Sistema Mercadinho", () => {
  test("Usu√°rio tenta logar com senha incorreta ‚Üí deve falhar", () => {
    // Simula√ß√£o de login: apenas email e senha corretos permitem acesso.
    function login(email, senha) {
      return email === "adm@gmail.com" && senha === "321456";
    }

    // O usu√°rio digitou a senha errada, o login deve retornar false.
    expect(login("adm@gmail.com", "senhaErrada")).toBe(false);
  });

  test("Usu√°rio tenta cadastrar produto sem pre√ßo ‚Üí deve lan√ßar erro", () => {
    // Simula√ß√£o de cadastro de produto: pre√ßo √© obrigat√≥rio.
    function cadastrarProduto(nome, qtd, preco) {
      if (!preco) throw new Error("Pre√ßo inv√°lido");
      return true;
    }

    // Como o pre√ßo n√£o foi informado, deve gerar erro "Pre√ßo inv√°lido".
    expect(() => cadastrarProduto("Borracha", 50, null)).toThrow("Pre√ßo inv√°lido");
  });

  test("Usu√°rio tenta comprar mais produtos do que o estoque dispon√≠vel ‚Üí deve lan√ßar erro", () => {
    // Simula√ß√£o de venda: n√£o √© permitido vender mais do que o estoque.
    function venderProduto(estoque, qtd) {
      if (qtd > estoque) throw new Error("Estoque insuficiente");
      return estoque - qtd;
    }

    // Estoque dispon√≠vel = 5, usu√°rio tentou comprar 10 ‚Üí deve falhar.
    expect(() => venderProduto(5, 10)).toThrow("Estoque insuficiente");
  });

  test("Usu√°rio digita telefone inv√°lido ‚Üí deve falhar na valida√ß√£o", () => {
    // Simula√ß√£o de valida√ß√£o de telefone no formato brasileiro.
    function validarTelefone(tel) {
      return /^\(\d{2}\) \d{4,5}-\d{4}$/.test(tel);
    }

    // Telefone errado ‚Üí deve retornar false
    expect(validarTelefone("12345")).toBe(false);

    // Telefone v√°lido no padr√£o brasileiro ‚Üí deve retornar true
    expect(validarTelefone("(71) 99282-9252")).toBe(true);
  });
});
